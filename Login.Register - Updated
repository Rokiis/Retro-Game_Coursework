//group D2 - Hazar
#include <ncurses.h> 
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;
bool loginregisterloop = false;
    void printMiddle(WINDOW * win, int y, int x, int upDown, string asd) 
{
	int getLength = asd.length();									 
	int newY = (y / 2) - upDown;
	int newX = (x - getLength) / 2;
	mvwprintw(win, newY, newX, asd.c_str());
}
int main()
{
    while (!loginregisterloop)
    {
        initscr();
        cbreak();
        curs_set(0);
        noecho();
        int height, width, start_y, start_x;
        height = 20;
        width = 70;
        start_y = 1;
        start_x = 1;

        WINDOW * loginWin = newwin(height, width, start_y, start_x);
        refresh();

        box (loginWin, 0, 0);
        // mvwprintw(win, 10, 35, "This is A Box");
        wrefresh(loginWin);
        keypad(loginWin, true); // allows the use of arrow keys

        string loginMenu[3] = {"Login", "Register", "Exit"};
        int choice;
        int loginHighlight = 0;

        while (1)
        {
            for (int i = 0; i < 3; i++)
            {
                if(i == loginHighlight)
                    wattron(loginWin, A_REVERSE);
                mvwprintw(loginWin, i+7, 3, loginMenu[i].c_str());
                wattroff(loginWin, A_REVERSE);
            }
            choice = wgetch(loginWin);

            switch(choice)
            {
                case KEY_UP:
                    loginHighlight--;
                    if(loginHighlight == -1)
                        loginHighlight = 2;
                    break;
                case KEY_DOWN:
                    loginHighlight++;
                    if(loginHighlight ==3)
                       loginHighlight = 0;
                    break;
                default:
                    break;
            }

            if(choice == 10)
                break;
            
        }
            string inputRegisterMenu = loginMenu [loginHighlight];
            wrefresh(loginWin);
            if (inputRegisterMenu == "Register")
            {
                bool registerGameLoop = false;
                while (!registerGameLoop)
                {
                    wrefresh(loginWin);
                    WINDOW * registerWin = newwin (20, 70, 1, 1);
                    keypad(registerWin, true);
                    refresh();
                    wborder(registerWin, 0, 0, 0, 0, 0, 0, 0, 0);
                    wattron(registerWin, COLOR_PAIR(1));
                    int registerMaxY, registerMaxX;
                    getmaxyx(registerWin, registerMaxY, registerMaxX);
                    printMiddle(registerWin, registerMaxY, registerMaxX, 9, "Register");
                    wrefresh(registerWin);
                    string registerWinChoices[2] = {"Create Username", "Go Back"};
                    int registerChoice;
                    int registerHighlight = 0;
                    
                    while (1)
                    {
                        for (int p = 0; p < 2; p++)
                        {
                            if (p == registerHighlight)
                                wattron(registerWin, A_REVERSE);
                            mvwprintw(registerWin, p+7, 3, registerWinChoices[p].c_str());
                            wattroff(registerWin, A_REVERSE);
                            wrefresh(registerWin);
                        }
                        wrefresh(registerWin);
                        registerChoice = wgetch(registerWin);
                        
                        switch(registerChoice)
                        {
                                case KEY_UP:
                                    registerHighlight--;
                                    if(registerHighlight == -1)
                                        registerHighlight = 1;
                                    break;
                                case KEY_DOWN:
                                    registerHighlight++;
                                    if(registerHighlight == 2)
                                        registerHighlight = 0;
                                    break;
                                default:
                                    break;
                        }
                        
                        /*if (registerChoice = 10)
                            break;*/
                        
                    }
                    string inputRegisterAccount = registerWinChoices[registerHighlight];
                    wrefresh(registerWin);
                    if (inputRegisterAccount == "Create Username")
                    {
                        echo();
                        curs_set(1);
                        string playerUsername;
                        wrefresh(registerWin);
                        mvwscanw(registerWin, 14, 2, "%s", playerUsername.c_str());
                        wrefresh(registerWin);
                        noecho();
                        curs_set(0);
                        mvwprintw(registerWin, 14, 2, "You have created an account %s. Press any key to return to Login/Register Menu", playerUsername.c_str());
                        //loginregisterloop = true;
                        registerGameLoop = true;
                        wrefresh(loginWin);
                    }
                    
                    
                }

            }
            string goBackMenu = loginMenu [loginHighlight];
            wrefresh(loginWin);
            if (inputRegisterMenu == "Exit")
            {
                bool exitGameLoop = false;
                while (!exitGameLoop)
                {
                    wrefresh(loginWin);
                    WINDOW * goBackWin = newwin (20, 70, 1, 1);
                    keypad(goBackWin, true);
                    refresh();
                    wborder(goBackWin, 0, 0, 0, 0, 0, 0, 0, 0);
                    wattron(goBackWin, COLOR_PAIR(1));
                    int backMaxY, backMaxX;
                    getmaxyx(goBackWin, backMaxY, backMaxX);
                    printMiddle(goBackWin, backMaxY, backMaxX, 9, "Thank You For Playing");
                    wrefresh(goBackWin);
                    
                    //getch();
                    //loginregisterloop = true;
                }
                
            }
        string loginGameMenu = loginMenu [loginHighlight];
        wrefresh(loginWin);
        if (inputRegisterMenu == "Login")
        {
            bool loginGameLoop = false;
            while (!loginGameLoop)
            {
                wrefresh(loginWin);
                WINDOW * gameLoginWin = newwin (20, 70, 1, 1);
                keypad(gameLoginWin, true);
                refresh();
                wborder(gameLoginWin, 0, 0, 0, 0, 0, 0, 0, 0);
                wattron(gameLoginWin, COLOR_PAIR(1));
                int loggameMaxY, loggameMaxX;
                getmaxyx(gameLoginWin, loggameMaxY, loggameMaxX);
                printMiddle(gameLoginWin, loggameMaxY, loggameMaxX, 9, "Login to Game");
                wrefresh(gameLoginWin);
                string gameLoginWinChoices[2] = {"Enter Username", "Go Back"};
                int gameLoginChoice;
                int gameLoginHighlight = 0;
                
                while(1)
                {
                    for (int y = 0; y < 2; y++)
                    {
                        if (y == gameLoginHighlight)
                            wattron(gameLoginWin, A_REVERSE);
                        mvwprintw(gameLoginWin, y+7, 3, gameLoginWinChoices[y].c_str());
                        wattroff(gameLoginWin, A_REVERSE);
                        wrefresh(gameLoginWin);
                        
                    }
                    wrefresh(gameLoginWin);
                    gameLoginChoice = wgetch(gameLoginWin);
                    
                    switch(gameLoginChoice)
                    {
                        case KEY_UP:
                            gameLoginHighlight--;
                            if(gameLoginHighlight == -1)
                                gameLoginHighlight = 0;
                            break;
                        case KEY_DOWN:
                            gameLoginHighlight--;
                            if(gameLoginHighlight == 2)
                                gameLoginHighlight = 1;
                            break;
                        default:
                            break;
                    }
                    /*if (gameLoginChoice = 10)
                        break;*/
                }
                //string 
            }
        }
        
    }
    getch();
    
    endwin();
    
    return 0;
}
